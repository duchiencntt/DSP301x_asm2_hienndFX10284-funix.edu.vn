# -*- coding: utf-8 -*-
"""lastname_firstname_grade_the_exams.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wLTjqNBg5YHK4M5zO6qbY1f5bb1RRrGL
"""

import numpy as np
import pandas as pd
#import sys as sys

'''
@description Read a file
@param {string} file_path - The path of the file
@param {string} file_name - The name of the file
@param {string} file_ext - The extension of the file
@returns {DataFrame} - Vaild list
'''
def ReadFile(file_path, file_name, file_ext):
  score_df = pd.DataFrame()
  try:
    with open(file_path + file_name + file_ext,'r') as file:
      print('Successfully opened ' + file_name + file_ext + '\n')
      lines = file.readlines() 

#TODO: add invalid line to invalid list

      invalid_list = []
      for line in lines:
        if len(line.replace('\n','').split(',')) != 26 or line[0] != 'N' or not line[1:9].isdigit():
          invalid_list.append(lines.index(line))

      print('**** ANALYZING ****\n')

#TODO: print invalid list

      if len(invalid_list) == 0:
        print('No errors found!')
      else:
        for i in invalid_list:
          line = lines[i]
          if len(line.replace('\n','').split(',')) != 26:
            print('Invalid line of data: does not contain exactly 26 values:')
          elif line[0] != 'N' or not line[1:9].isdigit():
            print('Invalid line of data: N# is invalid')
          else:
            print('Invalid line of data: ')
          print(line)
        
      print('\n**** REPORT **** \n')

      print('Total valid lines of data: {}'.format(len(lines) - len(invalid_list)))
      print('Total invalid lines of data: {}\n'.format(len(invalid_list)))

 #TODO: read valid line by pandas read_csv     
 
      score_df = pd.read_csv(file_path + file_name + file_ext, header=None, skiprows = invalid_list).fillna('')
  except IOError:
    print('File cannot be found.')
  return score_df

'''
@description Do Mark
@param {DataFrame} score_df - Student answer list
@param {List} answer_key - Answer key list
@returns {DataFrame} - Student grades list
'''
def DoMark(score_df, answer_key):
  i = 0
  for column in score_df.columns:
    if i > 0:

#TODO: mapping answer key

      score_df[column] = score_df[column].map(lambda x: 4 if x == answer_key[i - 1] else x)
      score_df[column] = score_df[column].map(lambda x: 0 if x == '' else x)
      score_df[column] = score_df[column].map(lambda x: -1 if (x != 4 and x != 0) else x)
    i += 1
  score_df['Mark'] = score_df.sum(axis=1)

#TODO: print report

  print('Mean (average) score: {:.2f}'.format(score_df['Mark'].mean()))
  print('Highest score: {}'.format(score_df['Mark'].max()))
  print('Lowest score: {}'.format(score_df['Mark'].min()))
  print('Range of scores: {}'.format(score_df['Mark'].max() - score_df['Mark'].min()))
  print('Median score: {}'.format(score_df['Mark'].median()))
  return score_df

'''
@description Write to file 
@param {string} file_path - The path of the file
@param {string} file_name - The name of the file
@param {string} file_ext - The extension of the file
@param {DataFrame} score_df - Student grades list
'''
def WriteFile(file_path, file_name, file_ext, score_df):
  score_df.to_csv(file_path + file_name + file_ext, columns=[0,'Mark'], header=False, index=False)

def MainTestGradeCalculator():
#NOTE: Config Expected Output Path at here 
  expect_path = '/content/Data Files/Expected Output/'

  #orig_stdout = sys.stdout
  #sys.stdout = open(expect_path + 'expectedoutput.txt', 'a')

  txt_input = 'Enter a class to grade (i.e. class1 for class1.txt): '
  file_name = input(txt_input)
  #print(txt_input + file_name)

#NOTE: Config Data Files Path at here 
  file_path = '/content/Data Files/'
  file_ext = '.txt'

  answer_key = 'B,A,D,D,C,B,D,A,C,C,D,B,A,B,A,C,B,D,A,C,A,A,B,D,D'
  answer_key = answer_key.split(',')

#TODO: Begin Test Grade Calculator
  score_df = ReadFile(file_path, file_name, file_ext)
  if len(score_df) != 0:
    score_df = DoMark(score_df, answer_key)
    WriteFile(expect_path, file_name + '_grades', file_ext, score_df)

  print('\n\n>>> ================================ RESTART ================================>>>')

  #sys.stdout.close()
  #sys.stdout = orig_stdout 
  #print('\nThe path of the report is: ' + expect_path + 'expectedoutput.txt')

MainTestGradeCalculator()

